// <auto-generated />
using System;
using Blog.Infrastruture.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.Infrastruture.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250801003204_Add_new_user")]
    partial class Add_new_user
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog_Domain.Models.Coment", b =>
                {
                    b.Property<int>("ComentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ComentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Coments");

                    b.HasData(
                        new
                        {
                            ComentId = 1,
                            Content = "Este é o primeiro comentário.",
                            CreatedAt = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 1,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 2,
                            Content = "Comentário 2",
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 2,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 3,
                            Content = "Comentário 3",
                            CreatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 3,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 4,
                            Content = "Comentário 4",
                            CreatedAt = new DateTime(2025, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 4,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 5,
                            Content = "Comentário 5",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 5,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 6,
                            Content = "Comentário 6",
                            CreatedAt = new DateTime(2025, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 6,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 7,
                            Content = "Comentário 7",
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 7,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 8,
                            Content = "Comentário 8",
                            CreatedAt = new DateTime(2025, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 8,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 9,
                            Content = "Comentário 9",
                            CreatedAt = new DateTime(2025, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 9,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 10,
                            Content = "Comentário 10",
                            CreatedAt = new DateTime(2025, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 10,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 11,
                            Content = "Comentário 11",
                            CreatedAt = new DateTime(2025, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 11,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 12,
                            Content = "Comentário 12",
                            CreatedAt = new DateTime(2025, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 12,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 13,
                            Content = "Comentário 13",
                            CreatedAt = new DateTime(2025, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 13,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 14,
                            Content = "Comentário 14",
                            CreatedAt = new DateTime(2025, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 14,
                            UserId = 1
                        },
                        new
                        {
                            ComentId = 15,
                            Content = "Comentário 15",
                            CreatedAt = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostId = 15,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Blog_Domain.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            Content = "Este é o conteúdo do primeiro post.",
                            CreatedAt = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Primeiro Post",
                            UpdatedAt = new DateTime(2025, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 2,
                            Content = "Conteúdo do post 2",
                            CreatedAt = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 2",
                            UpdatedAt = new DateTime(2025, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 3,
                            Content = "Conteúdo do post 3",
                            CreatedAt = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 3",
                            UpdatedAt = new DateTime(2025, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 4,
                            Content = "Conteúdo do post 4",
                            CreatedAt = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 4",
                            UpdatedAt = new DateTime(2025, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 5,
                            Content = "Conteúdo do post 5",
                            CreatedAt = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 5",
                            UpdatedAt = new DateTime(2025, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 6,
                            Content = "Conteúdo do post 6",
                            CreatedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 6",
                            UpdatedAt = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 7,
                            Content = "Conteúdo do post 7",
                            CreatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 7",
                            UpdatedAt = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 8,
                            Content = "Conteúdo do post 8",
                            CreatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 8",
                            UpdatedAt = new DateTime(2025, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 9,
                            Content = "Conteúdo do post 9",
                            CreatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 9",
                            UpdatedAt = new DateTime(2025, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 10,
                            Content = "Conteúdo do post 10",
                            CreatedAt = new DateTime(2025, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 10",
                            UpdatedAt = new DateTime(2025, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 11,
                            Content = "Conteúdo do post 11",
                            CreatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 11",
                            UpdatedAt = new DateTime(2025, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 12,
                            Content = "Conteúdo do post 12",
                            CreatedAt = new DateTime(2025, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 12",
                            UpdatedAt = new DateTime(2025, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 13,
                            Content = "Conteúdo do post 13",
                            CreatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 13",
                            UpdatedAt = new DateTime(2025, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 14,
                            Content = "Conteúdo do post 14",
                            CreatedAt = new DateTime(2025, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 14",
                            UpdatedAt = new DateTime(2025, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            PostId = 15,
                            Content = "Conteúdo do post 15",
                            CreatedAt = new DateTime(2025, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Post 15",
                            UpdatedAt = new DateTime(2025, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Blog_Domain.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshToken");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Expiration = new DateTime(2025, 7, 29, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsRevoked = false,
                            Token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwidW5pcXVlX25hbWUiOiJhZG1pbiIsImVtYWlsIjoidGVzdGVAdGVzdGUuY29tIiwiZXhwIjoxNzUzODM4MDg4LCJpc3MiOiJUZXN0SXNzdWVyIiwiYXVkIjoiVGVzdEF1ZGllbmNlIn0.Xv3JXQ9s1QjvPTe_AmnFldqdrzTGkd1UKnvfUU5jRfU",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Blog_Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "teste@teste.com",
                            PasswordHash = "AHIjjUiOw1IVwAau3589yIYYrlMf6mjnvu98HDhs36Kx7ZwEqYnCw72xklLO4yZ1gw==",
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "teste2@teste.com",
                            PasswordHash = "AHIjjUiOw1IVwAau3589yIYYrlMf6mjnvu98HDhs36Kx7ZwEqYnCw72xklLO4yZ1gw==",
                            Username = "admin2"
                        });
                });

            modelBuilder.Entity("Blog_Domain.Models.Coment", b =>
                {
                    b.HasOne("Blog_Domain.Models.Post", "Post")
                        .WithMany("Coments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Blog_Domain.Models.User", "User")
                        .WithMany("Coments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog_Domain.Models.Post", b =>
                {
                    b.HasOne("Blog_Domain.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog_Domain.Models.RefreshToken", b =>
                {
                    b.HasOne("Blog_Domain.Models.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Blog_Domain.Models.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog_Domain.Models.Post", b =>
                {
                    b.Navigation("Coments");
                });

            modelBuilder.Entity("Blog_Domain.Models.User", b =>
                {
                    b.Navigation("Coments");

                    b.Navigation("Posts");

                    b.Navigation("RefreshToken");
                });
#pragma warning restore 612, 618
        }
    }
}
